name: Terraform & Next.js Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
  TF_VAR_db_user: "admin"
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  AWS_REGION: eu-west-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Write SSH private key
        working-directory: ./infrastructure
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > githubkeys
          chmod 600 githubkeys
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > githubkeys.pub
          chmod 644 githubkeys.pub

      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./infrastructure
        run: terraform apply -auto-approve

      - name: Get EC2 Instance IP
        working-directory: ./infrastructure
        id: get-ip
        run: |
          INSTANCE_IP=$(terraform output -raw ec2_public_ip)
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "EC2 Instance IP: $INSTANCE_IP"

      - name: Wait for EC2 to be reachable
        run: sleep 60

      - name: Setup SSH for deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.get-ip.outputs.instance_ip }} >> ~/.ssh/known_hosts

      - name: Deploy App via SSH
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.instance_ip }} << 'EOF'
            sudo apt update
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt install -y nodejs nginx git mysql-client
            sudo systemctl stop nginx || true

            # Clean up any existing app
            rm -rf /home/ubuntu/nextjs-s3-upload-app
            
            # Clone the current repository instead of a different one
            cd /home/ubuntu
            git clone https://github.com/${{ github.repository }}.git nextjs-s3-upload-app
            cd nextjs-s3-upload-app

            # Create environment file
            cat > .env.local << 'ENVEOF'
            AWS_REGION=eu-west-1
            AWS_BUCKET_NAME=your-bucket-name
            DB_HOST=your-db-host
            DB_USER=admin
            DB_PASS=${{ secrets.DB_PASSWORD }}
            DB_NAME=uploadappdb
            ENVEOF

            # Install dependencies and build
            npm install
            npm run build
            
            # Install pm2 globally with sudo
            sudo npm install -g pm2
            
            # Kill existing pm2 processes and start new one
            pm2 kill || true
            pm2 start npm --name nextjs-app -- start
            
            # Configure nginx to proxy to the Next.js app
            sudo tee /etc/nginx/sites-available/nextjs-app << 'NGINXEOF'
            server {
                listen 80;
                server_name _;
                
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            NGINXEOF
            
            # Enable the nginx site and restart
            sudo ln -sf /etc/nginx/sites-available/nextjs-app /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t && sudo systemctl restart nginx
            sudo systemctl enable nginx
            
            echo "Deployment completed successfully!"
            echo "Application URL: http://${{ steps.get-ip.outputs.instance_ip }}"
          EOF

      - name: Display Access Information
        run: |
          echo "🎉 Deployment completed successfully!"
          echo ""
          echo "📱 Application Access:"
          echo "   URL: http://${{ steps.get-ip.outputs.instance_ip }}"
          echo ""
          echo "🔧 SSH Access:"
          echo "   Command: ssh -i infrastructure/githubkeys ubuntu@${{ steps.get-ip.outputs.instance_ip }}"
          echo ""
          echo "📊 PM2 Status (run on server):"
          echo "   pm2 status"
          echo "   pm2 logs nextjs-app"
          echo ""
          echo "🌐 Nginx Status:"
          echo "   sudo systemctl status nginx"