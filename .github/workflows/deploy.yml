name: Build and Deploy Next.js

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node_modules and .next/cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Build Next.js app
        run: |
          export NODE_OPTIONS=--max-old-space-size=3072
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: |
            .next
            public
            node_modules
            package.json
            .env.local
            next.config.ts

  terraform:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure
    outputs:
      SERVER_IP: ${{ steps.get_ip.outputs.SERVER_IP }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Terraform Init
        run: terraform init

      - name: Pre-Terraform SG Import/Create
        run: |
          cd infrastructure
          chmod +x pre_terraform.sh
          ./pre_terraform.sh

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="private_key=${{ secrets.EC2_SSH_PRIVATE_KEY }}"

      - name: Get EC2 Instance IP
        id: get_ip
        run: |
          echo "SERVER_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

  deploy:
    needs: [build, terraform]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build
          path: app

      - name: Copy build to server via rsync
        env:
          SERVER_IP: ${{ needs.terraform.outputs.SERVER_IP }}
          SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          rsync -avz -e "ssh -i key.pem -o StrictHostKeyChecking=no" app/ ubuntu@$SERVER_IP:/home/ubuntu/nextjs-s3-upload-app

      - name: Restart app on server
        env:
          SERVER_IP: ${{ needs.terraform.outputs.SERVER_IP }}
          SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@$SERVER_IP <<'EOSSH'
            set -e
            echo "=== Upgrading Node.js to v18 ==="
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
            node --version
            npm --version
            echo "=== Installing PM2 ==="
            sudo npm install -g pm2
            export PATH=$PATH:$(npm bin -g):/usr/local/bin
            echo "PM2 location: $(which pm2)"
            pm2 --version || { echo "PM2 install failed"; exit 1; }
            cd /home/ubuntu/nextjs-s3-upload-app
            pm2 kill || true
            pm2 start npm --name nextjs-app -- start
            pm2 status
          EOSSH

      - name: Display Application URL
        run: |
          cd infrastructure
          echo "Your application is available at:"
          terraform output -raw application_url